@using SurveyApp.Model.Models

@{
    var surveyHelper = this.KnockoutHelperForType<Survey>("survey", false);
}

<div class="messageBox autoclose" style="width: 700px;">
    <form class="form-horizontal">
        <div class="modal-header">
            <button type="button" class="close" data-bind="click: close">&times;</button>
            <h3>
                <span>
                    @*This demos "PropStringFor", label could be a ko.computed(..) in real life*@
                    <!-- ko if: @surveyHelper.PropStringFor(x => x.SurveyId) === null -->
                        Create Survey
                    <!-- /ko -->
                    
                    @*This demos "PropStringFor", label could be a ko.computed(..) in real life*@
                    <!-- ko if: @surveyHelper.PropStringFor(x => x.SurveyId) !== null -->

                        Update Survey for
                        @surveyHelper.BoundTextFor(x => x.LastName),
                        @surveyHelper.BoundTextFor(x => x.FirstName)
                    <!-- /ko -->
                    
                    
                </span>
            </h3>
        </div>

        <div class="modal-body">
            <fieldset>
                <legend>Basic Details</legend>
                
                @*
                Full control over element creation if you want
                *@
                <div class="control-group">
                    <label for="@surveyHelper.GetExpressionTextFor(x => x.FirstName)" class="control-label">@surveyHelper.DisplayNameFor(x => x.FirstName)</label>
                    <div class="controls">
                        <input type="text" @surveyHelper.DataBind(db => db.Value(x => x.FirstName).ValueUpdate(ValueUpdate.KeyUp)) id="@surveyHelper.GetExpressionTextFor(x => x.FirstName)">
                    </div>
                </div>
                
                @*
                Use some helper wrappers to achieve the exact same result with less code
                *@
                <div class="control-group">
                    @surveyHelper.LabelFor(x => x.LastName).Class("control-label")
                    <div class="controls">
                        @surveyHelper.BoundTextBoxFor(x => x.LastName)
                    </div>
                </div>

                <div class="control-group">
                    @surveyHelper.LabelFor(x => x.Location).Class("control-label")
                    <div class="controls">
                        <input type="text" data-bind="autocomplete: { source: getMatchingLocations, select: selectLocation }" />
                    </div>
                </div>
                
                <div class="control-group" data-bind="if: survey.Location !== null">
                    <!-- ko compose: { model: new locationInfo(@surveyHelper.PropStringFor(x => x.Location)), view: 'views/survey/shared/locationInfo' } -->
                    <!-- /ko -->
                </div>

            </fieldset>

            <fieldset>
                <legend>Demographics</legend>

            </fieldset>

            <fieldset>
                <legend>Favorite Foods</legend>

            </fieldset>
        </div>
        <div class="modal-footer">
            <button class="btn" data-bind="click: close">Close</button>
            <button class="btn btn-primary" type="submit">
                @*This demos "PropStringFor", label could be a ko.computed(..) in real life*@
                <!-- ko if: @surveyHelper.PropStringFor(x => x.SurveyId) === null -->
                Create
                <!-- /ko -->
                <!-- ko if: @surveyHelper.PropStringFor(x => x.SurveyId) !== null -->
                Update
                <!-- /ko -->
            </button>
        </div>
    </form>
</div>
