@using SurveyApp.Model.Models

@{
    var surveyHelper = this.KnockoutHelperForType<Survey>("survey", false);
}
<section>
    <div class="row">
        <h1 data-bind="text: headerText">
        </h1>
    </div>
    <div class="row">
        <div class="pull-right">
            <button class="btn" data-bind="click: cancel">Cancel</button>
            <button class="btn btn-primary" data-bind="click: save, text: saveText"></button>
        </div>
    </div>
    <div class="row">
        <form class="form-horizontal">
            <fieldset>
                <legend>Basic Details</legend>
                
                @*Full control over element creation if you want with 'strong typing'*@
                <div class="control-group">
                    <label for="@surveyHelper.GetExpressionTextFor(x => x.FirstName)" class="control-label">@surveyHelper.DisplayNameFor(x => x.FirstName)</label>
                    <div class="controls">
                        <input type="text" @surveyHelper.DataBind(db => db.Value(x => x.FirstName)) id="@surveyHelper.GetExpressionTextFor(x => x.FirstName)">
                    </div>
                </div>
                
                @* Use some helper wrappers to achieve the exact same result with less typing*@
                <div class="control-group">
                    @surveyHelper.LabelFor(x => x.LastName).Class("control-label")
                    <div class="controls">
                        @surveyHelper.BoundTextBoxFor(x => x.LastName)
                    </div>
                </div>

                <div class="control-group">
                    <label for="FindLocation" class="control-label">Enter new location</label>
                    <div class="controls">
                        <input type="text" id="FindLocation" data-bind="autocomplete: { source: getMatchingLocations, select: selectLocation }" />
                    </div>
                </div>
                
                <div class="control-group" data-bind="if: survey.Location !== null" style="max-width: 375px;">
                    @*Inject a 'shared view' into the DOM specifiying the model and view to compose together*@

                    <!-- ko compose: { model: new locationInfo(@surveyHelper.PropStringFor(x => x.FavoritePlace)), view: 'views/surveys/shared/locationInfo' } -->
                    <!-- /ko -->
                </div>

            </fieldset>

            <fieldset>
                <legend>Demographic Information</legend>
                
                @*Gender*@
                <div class="control-group">
                    @surveyHelper.LabelFor(x => x.Gender).Class("control-label")
                    <div class="controls">
                        <label class="radio inline">
                            @surveyHelper.BoundRadioButtonFor(x => x.Gender, (int)Gender.Male)
                            Male
                        </label>
                        <label class="radio inline">
                            @surveyHelper.BoundRadioButtonFor(x => x.Gender, (int)Gender.Female)
                            Female
                        </label>
                    </div>
                </div>
                
                @*Date of Birth*@
                <div class="control-group">
                    @surveyHelper.LabelFor(x => x.DateOfBirth).Class("control-label")
                    <div class="controls">
                        
                        @*wow this seems like alot of typing...*@
                        <input type="text" class="input-small" @surveyHelper.DataBind(db => db.Custom("datepicker", x => x.DateOfBirth)) />
                    </div>
                </div>
                
                 @*Date of Death*@
                <div class="control-group">
                    
                    @*I'm sick of typing control-label for twitterbootstrap. Extend existing label with 3 lines of code total*@
                    @surveyHelper.BootstrapLabelFor(x => x.DateOfDeath)

                    <div class="controls">
                        
                        @*Also sick of above code for datepickers. Make a custom helper with 3 lines of code total*@
                        @surveyHelper.BoundDatePickerFor(x => x.DateOfDeath)
                    </div>
                </div>
                
                @*Likes WubWub*@
                <div class="control-group">
                    @surveyHelper.LabelFor(x => x.LikesMusic).Class("control-label")
                    <div class="controls">
                        @surveyHelper.BoundCheckBoxFor(x => x.LikesMusic)
                    </div>
                </div>
                

            </fieldset>

            <fieldset>
                <legend>Tech Products Owned</legend>
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th>Tech Product Type</th>
                            <th>Spec summary</th>
                            <th class="actions"></th>
                        </tr>
                    </thead>
                    @*TODO, foreach*@
                    <tbody data-bind="foreach: survey.TechProducts">
                        <tr>
                            <td data-bind="text: productTypeDisplay"></td>
                            <td data-bind="text: specSummary"></td>
                            <td class="actions">
                                <button class="btn btn-info">
                                    <i class="icon-edit" data-bind="click: function () { $root.editTechProduct($data) }"></i>
                                </button>
                                <button class="btn btn-danger">
                                    <i class="icon-remove-sign"></i>
                                </button>
                            </td>
                        </tr>
                    </tbody>
                </table>
                <button class="btn btn-success">
                    <i class="icon-plus" data-bind="click: function () { $root.addTechProduct() }"></i>
                    Add
                </button>
            </fieldset>
        </form>
    </div>
</section>