@using SurveyApp.Model.Models

@{
	var survey = this.KnockoutHelperForType<Survey>("survey", false);
}
<section>
	<div class="row">
		<h1 data-bind="text: headerText">
		</h1>
	</div>
	<div class="row">
		<div class="pull-right">
			<button class="btn" data-bind="click: reset">Reset</button>
			<button class="btn" data-bind="click: cancel">Cancel</button>
			<button class="btn btn-primary" data-bind="command: save, text: saveText"></button>
		</div>
	</div>
	<div class="row form-horizontal">
        <fieldset>
            <legend>Basic Details</legend>
				
            @*First Name*@
            @*What you would normally type doing a knockout databind (hope you don't fat finger anything...)*@
            <div class="control-group">
                <label for="FirstName" class="control-label">
                    * First Name
                </label>
                <div class="controls">
                    <input type="text" data-bind="value: survey.FirstName" id="FirstName">
                </div>
            </div>

            @*Last Name*@                
            @*Use FluentKnockoutHelpers to generate the same result strongly typed,
            [Display] Name support, intellisense and most of all less typing!*@
            <div class="control-group">
                @survey.LabelFor(x => x.LastName).Class("control-label")
                <div class="controls">
                    @survey.BoundTextBoxFor(x => x.LastName)
                </div>
            </div>
				
            @*New home location*@
            <div class="control-group">
                <label for="FindLocation" class="control-label">New home location</label>
                <div class="controls">
                    <input type="text" id="FindLocation"
                        data-bind="autocomplete: { source: getMatchingLocations, select: selectLocation }" />
                </div>
            </div>
				
            @*Home location 'shared view'*@

            <div class="control-group" data-bind="if: survey.HomeLocation !== null" style="max-width: 375px;">
                @*Inject a 'shared view' into the DOM specifiying the model and view to compose together*@
					
                <!-- ko compose: { model: new locationInfo(@survey.PropStringFor(x => x.HomeLocation)), view: 'views/surveys/shared/locationInfo' } -->
                <!-- /ko -->
            </div>

        </fieldset>

        <fieldset>
            <legend>Other Information</legend>
				
            @*Person Id Number*@
            @*Example of remote validation (try 1234, its taken)*@           
            <div class="control-group">
                @*I'm sick of typing control-label for twitterbootstrap. Extend existing label with 3 lines of code total*@
                <label for="PersonIdNumber" class="control-label">* Person Id (try 3456)</label>
                <div class="controls">
                    @survey.BoundTextBoxFor(x => x.PersonIdNumber).Class("input-small")
                </div>
            </div>

            @*Gender*@
            @*Example of a radio button*@
            <div class="control-group">
                @survey.BootstrapLabelFor(x => x.Gender)
                <div class="controls">
                    <label class="radio inline">
                        @survey.BoundRadioButtonFor(x => x.Gender, (int)Gender.Male)
                        Male
                    </label>
                    <label class="radio inline">
                        @survey.BoundRadioButtonFor(x => x.Gender, (int)Gender.Female)
                        Female
                    </label>
                </div>
            </div>

            @*Date of Birth*@
            @*Example of a date picker*@
            <div class="control-group">
                @survey.BootstrapLabelFor(x => x.DateOfBirth)
                <div class="controls">
                    @*wow this seems like alot of typing...*@
                    @*<input type="text" class="input-small" @survey.DataBind(db => db.Custom("datepicker", x => x.DateOfBirth)) />*@

					@*Make a custom helper extension with 3 lines of code total*@
                    @survey.BoundDatePickerFor(x => x.DateOfBirth)
                </div>
            </div>
				
            @*Likes Booleans*@
            @*Example of a checkbox*@
            <div class="control-group">
                @survey.BootstrapLabelFor(x => x.LikesBooleans)
                <div class="controls">
                    @survey.BoundCheckBoxFor(x => x.LikesBooleans)
                </div>
            </div>
		    
            @*Optional Field*@
            @*Example of a non required field*@
            <div class="control-group">
                @survey.BootstrapLabelFor(x => x.OptionalField)
                <div class="controls">
                    @survey.BoundTextBoxFor(x => x.OptionalField)
                </div>
            </div>

            @*Favorite Website*@
            @*Example of a textbox with a URL data annotation*@
            <div class="control-group">
                @survey.BootstrapLabelFor(x => x.FavoriteWebsite)
                <div class="controls">
                    @survey.BoundTextBoxFor(x => x.FavoriteWebsite)
                </div>
            </div>
            
            @*Colors*@
            <div class="control-group">
                @survey.BootstrapLabelFor(x => x.FavoriteColorId)
                <div class="controls">
                    @(survey.BoundSelectListFor<Color>(x => x.FavoriteColorId, "colors", x => x.Id, x => x.Name, "Select a color..."))
                </div>
            </div>
				
            @*Favorite Food*@
            @*Example of dependent drop downs*@
            <div class="control-group">
                @survey.BootstrapLabelFor(x => x.FavoriteFoodId)
                <div class="controls form-inline">
                    <select 
                        data-bind="options: foodGroups, optionsText: 'Name', value: survey.selectedFoodGroup, optionsCaption: 'Select a food group...'">
                    </select>
                    @(survey.BoundSelectListFor<Food>(x => x.FavoriteFoodId, "survey.availableFoods", x => x.Id, x => x.Name, "Select a food...")
                          .DataBind(db => db.Visible("isFoodGroupSelected")))
                </div>
            </div>
        </fieldset>
			
        @*Family Tree*@
        @*Example of editable recursive hierarchy*@
        <fieldset>
            <legend>
                Family Tree 
                <button class="btn btn-success pull-right" data-bind="click: addChild">
                    <i class="icon-plus"></i>
                    Add Child
                </button>
            </legend>
            <div class="sortable-hierarchy" data-bind="compose: { model: survey, view: 'views/surveys/relation' }"> </div>
        </fieldset>

        @*Tech Products*@
        @*Example of a grid editable via a popup*@
        <fieldset>
            <legend>Tech Products Owned</legend>
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Tech Product Type</th>
                        <th>Spec summary</th>
                        <th class="actions"></th>
                    </tr>
                </thead>
                <tbody data-bind="foreach: survey.TechProducts">
                    <tr>
                        <td data-bind="text: productTypeDisplay"></td>
                        <td data-bind="text: specSummary"></td>
                        <td class="actions">
                            <button class="btn btn-info" data-bind="click: $root.editTechProduct">
                                <i class="icon-edit"></i>
                            </button>
                            <button class="btn btn-danger" data-bind="click: $root.deleteTechProduct">
                                <i class="icon-remove-sign"></i>
                            </button>
                        </td>
                    </tr>
                </tbody>
            </table>
            <button class="btn btn-success pull-right" data-bind="click: addTechProduct">
                <i class="icon-plus"></i>
                Add Tech Product
            </button>
        </fieldset>
    </div>
</section>