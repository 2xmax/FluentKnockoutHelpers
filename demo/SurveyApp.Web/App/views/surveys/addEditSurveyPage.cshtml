@using SurveyApp.Model.Models
@using SurveyApp.Model.Models

@{
	var survey = this.KnockoutHelperForType<Survey>("survey", false);
}
<section>
	<div class="row">
		<h1 data-bind="text: headerText">
		</h1>
	</div>
	<div class="row">
		<div class="pull-right">
			<button class="btn" data-bind="click: reset">Reset</button>
			<button class="btn" data-bind="click: cancel">Cancel</button>
			<button class="btn btn-primary" data-bind="command: save, activity: save.isExecuting, text: saveText"></button>
		</div>
	</div>
	<div class="row">
		<form class="form-horizontal">
			<fieldset>
				<legend>Basic Details</legend>
				
				@*First Name*@
				@*Full control over element creation if you want with 'strong typing'*@
				<div class="control-group">
					<label for="@survey.GetExpressionTextFor(x => x.FirstName)" class="control-label">
						@survey.DisplayNameFor(x => x.FirstName)
					</label>
					<div class="controls">
						<input type="text" @survey.DataBind(db => db.Value(x => x.FirstName)) id="@survey.GetExpressionTextFor(x => x.FirstName)">
					</div>
				</div>

				@*Last Name*@                
				@* Use some helper wrappers to achieve the exact same result with less typing*@
				<div class="control-group">
					@survey.LabelFor(x => x.LastName).Class("control-label")
					<div class="controls">
						@survey.BoundTextBoxFor(x => x.LastName)
					</div>
				</div>
				
				@*New home location*@
				<div class="control-group">
					<label for="FindLocation" class="control-label">New home location</label>
					<div class="controls">
						<input type="text" id="FindLocation" data-bind="autocomplete: { source: getMatchingLocations, select: selectLocation }" />
					</div>
				</div>
				
				@*Home location 'shared view'*@
				<div class="control-group" data-bind="if: survey.Location !== null" style="max-width: 375px;">
					@*Inject a 'shared view' into the DOM specifiying the model and view to compose together*@
					
					<!-- ko compose: { model: new locationInfo(@survey.PropStringFor(x => x.HomeLocation)), view: 'views/surveys/shared/locationInfo' } -->
					<!-- /ko -->
				</div>

			</fieldset>

			<fieldset>
				<legend>Other Information</legend>
				
				@*Person Id Number*@                
				<div class="control-group">
					@survey.LabelFor(x => x.PersonIdNumber).Class("control-label")
					<div class="controls">
						@survey.BoundTextBoxFor(x => x.PersonIdNumber)
					</div>
				</div>

				@*Gender*@
				<div class="control-group">
					@survey.LabelFor(x => x.Gender).Class("control-label")
					<div class="controls">
						<label class="radio inline">
							@survey.BoundRadioButtonFor(x => x.Gender, (int)Gender.Male)
							Male
						</label>
						<label class="radio inline">
							@survey.BoundRadioButtonFor(x => x.Gender, (int)Gender.Female)
							Female
						</label>
					</div>
				</div>

				@*Date of Birth*@
				<div class="control-group">
					@survey.LabelFor(x => x.DateOfBirth).Class("control-label")
					<div class="controls">
						
						@*wow this seems like alot of typing...*@
						<input type="text" class="input-small" @survey.DataBind(db => db.Custom("datepicker", x => x.DateOfBirth)) />
					</div>
				</div>
				
				@*Date of Death*@
				<div class="control-group">
					
					@*I'm sick of typing control-label for twitterbootstrap. Extend existing label with 3 lines of code total*@
					@survey.BootstrapLabelFor(x => x.DateOfDeath)

					<div class="controls">
						
						@*Also sick of above code for datepickers. Make a custom helper with 3 lines of code total*@
						@survey.BoundDatePickerFor(x => x.DateOfDeath)
					</div>
				</div>
				
				@*Likes Booleans*@
				<div class="control-group">
					@survey.BootstrapLabelFor(x => x.LikesBooleans)
					<div class="controls">
						@survey.BoundCheckBoxFor(x => x.LikesBooleans)
					</div>
				</div>
				
				@*Favorite Website*@
				<div class="control-group">
					@survey.BootstrapLabelFor(x => x.FavoriteWebsite)
					<div class="controls">
						@survey.BoundTextBoxFor(x => x.FavoriteWebsite)
					</div>
				</div>
				
				@*Favorite Color*@
				<div class="control-group">
					@survey.BootstrapLabelFor(x => x.FavoriteColorId)
					<div class="controls">
						@(survey.BoundSelectListFor<ColorData>(x => x.FavoriteColorId, "colors", c => c.ColorId, c => c.ColorName, "Select a color.."))
						<span class="color-preview" data-bind="style: { backgroundColor: selectedColorObj().ColorCode }">
						</span>
					</div>
				</div>
			</fieldset>
			
			@*Family Tree*@
			<fieldset>
				<legend>
					Family Tree 
					<button class="btn btn-success pull-right" data-bind="click: addChild">
						<i class="icon-plus"></i>
						Add Child
					</button>
				</legend>
				<div class="sortable-hierarchy" data-bind="compose: { model: survey, view: 'views/surveys/relation' }"> </div>
			</fieldset>

			@*Tech Products*@
			<fieldset>
				<legend>Tech Products Owned</legend>
				<table class="table table-bordered">
					<thead>
						<tr>
							<th>Tech Product Type</th>
							<th>Spec summary</th>
							<th class="actions"></th>
						</tr>
					</thead>
					<tbody data-bind="foreach: survey.TechProducts">
						<tr>
							<td data-bind="text: productTypeDisplay"></td>
							<td data-bind="text: specSummary"></td>
							<td class="actions">
								<button class="btn btn-info" data-bind="click: function () { $root.editTechProduct($data) }">
									<i class="icon-edit"></i>
								</button>
								<button class="btn btn-danger" data-bind="click: function () { $root.deleteTechProduct($data) }">
									<i class="icon-remove-sign"></i>
								</button>
							</td>
						</tr>
					</tbody>
				</table>
				<button class="btn btn-success pull-right" data-bind="click: addTechProduct">
					<i class="icon-plus"></i>
					Add Tech Product
				</button>
			</fieldset>
		</form>
	</div>
</section>